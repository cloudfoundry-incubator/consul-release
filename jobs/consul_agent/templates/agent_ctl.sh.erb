#!/bin/bash -e
# vim: set ft=sh

<%
  require 'openssl'
  require 'base64'
  def string_to_encrypt_key(string)
    return string if is_already_key?(string)
    Base64.encode64(OpenSSL::PKCS5.pbkdf2_hmac_sha1(string, "", 20000, 16)).strip
  end

  def is_already_key?(string)
    return false unless string.length == 24
    Base64.strict_decode64(string).length == 16
  rescue
    false
  end
%>

LOG_DIR=/var/vcap/sys/log/consul_agent
RUN_DIR=/var/vcap/sys/run/consul_agent
DATA_DIR=/var/vcap/store/consul_agent
CONF_DIR=/var/vcap/jobs/consul_agent/config
CERT_DIR=$CONF_DIR/certs

PKG=/var/vcap/packages/consul
confab_package=/var/vcap/packages/confab

PID_FILE=$RUN_DIR/consul_agent.pid
NODE_NAME='<%="#{name.gsub('_', '-')}-#{spec.index}"%>'

source /var/vcap/packages/consul-common/utils.sh

mkdir -p /var/vcap/sys/log/monit
exec 1>> /var/vcap/sys/log/monit/consul_agent.out.log
exec 2>> /var/vcap/sys/log/monit/consul_agent.err.log

case $1 in
  start)

    pid_guard ${PIDFILE} "consul_agent"

    mkdir -p $LOG_DIR
    chown -R vcap:vcap $LOG_DIR

    mkdir -p $RUN_DIR
    chown -R vcap:vcap $RUN_DIR

    mkdir -p $DATA_DIR
    chown -R vcap:vcap $DATA_DIR

    <% if p("consul.require_ssl") %>
      chown vcap:vcap ${CERT_DIR}/*.{crt,key}
      chmod 640 ${CERT_DIR}/*.{crt,key}
    <% end %>

    <% p("consul.agent.services").each do |service_name, service| %>
    cat > $CONF_DIR/service-<%= service_name %>.json <<EOF
<%=
{
  "service" => {
    "name" => service_name.tr('_', '-'),
    "check" => {
      "script" => "/var/vcap/jobs/#{service_name}/bin/dns_health_check",
      "interval" => "3s"
    },
    "tags" => ["#{name.gsub('_', '-')}-#{spec.index}"]
  }.merge(service)
}.to_json
%>
EOF
    <% end %>

    # "Consul uses a significant amount of virtual memory, since LMDB uses
    # mmap() underneath. It uses about 700MB of a 32bit system and 40GB on a
    # 64bit system."
    #
    # this mainly applies to bosh-lite
    ulimit -v unlimited
    ulimit -n 4096

    consul_join="<%=p("consul.agent.servers.lan").join(',')%>"
    server=<%=p("consul.agent.mode") == "server"%>

    setcap cap_net_bind_service=+ep $PKG/bin/consul

    GOMAXPROCS=$(nproc)
    if [ "$GOMAXPROCS" = "1" ]; then
      GOMAXPROCS=2
    fi

    export GOMAXPROCS

    if [ "${server}" != "true" ]; then
      rm -f $DATA_DIR/serf/local.keyring
    fi

#    chpst -u vcap:vcap $PKG/bin/consul agent \
#      -config-dir=$CONF_DIR \
#      2> >(tee -a ${LOG_DIR}/consul_agent.stderr.log | logger -p user.error -t vcap.consul-agent) \
#      1> >(tee -a ${LOG_DIR}/consul_agent.stdout.log | logger -p user.info  -t vcap.consul-agent) &
#
#    echo "Consul pid is " + $consul_pid

    chpst -u vcap:vcap "${confab_package}/bin/confab" \
      start \
      -server=<%=p("consul.agent.mode") == "server"%> \
      -agent-path="${PKG}/bin/consul" \
      -consul-config-dir="${CONF_DIR}" \
      -pid-file="${PID_FILE}" \
      <% p("consul.agent.servers.lan").each do |server| %> \
        -expected-member <%= server %> \
      <% end %> \
      <% if_p("consul.encrypt_keys") do |encrypt_keys| %> \
        <% encrypt_keys.each do |key| %> \
          -encryption-key <%= string_to_encrypt_key(key) %> \
        <% end %> \
      <% end %> \
      2> >(tee -a ${LOG_DIR}/consul_agent.stderr.log | logger -p user.error -t vcap.consul-agent) \
      1> >(tee -a ${LOG_DIR}/consul_agent.stdout.log | logger -p user.info  -t vcap.consul-agent)

    ;;

  stop)
    "${confab_package}/bin/confab" \
      stop \
      -consul-config-dir "${CONF_DIR}" \
      -pid-file "${PID_FILE}" \
      -agent-path="${PKG}/bin/consul" \
      2> >(tee -a ${LOG_DIR}/consul_agent.stderr.log | logger -p user.error -t vcap.consul-agent) \
      1> >(tee -a ${LOG_DIR}/consul_agent.stdout.log | logger -p user.info  -t vcap.consul-agent)
    ;;

  *)
    echo "Usage: $0 {start|stop}"
    ;;
esac
