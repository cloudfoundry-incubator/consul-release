#!/bin/bash -exu

<%
  require 'openssl'
  require 'base64'
  def string_to_encrypt_key(string)
    return string if is_already_key?(string)
    Base64.encode64(OpenSSL::PKCS5.pbkdf2_hmac_sha1(string, "", 20000, 16)).strip
  end

  def is_already_key?(string)
    return false unless string.length == 24
    Base64.strict_decode64(string).length == 16
  rescue
    false
  end
%>

LOG_DIR=/var/vcap/sys/log/consul_agent
RUN_DIR=/var/vcap/sys/run/consul_agent
DATA_DIR=/var/vcap/store/consul_agent
CONF_DIR=/var/vcap/jobs/consul_agent/config
CERT_DIR=$CONF_DIR/certs
PKG=/var/vcap/packages/consul
PIDFILE=$RUN_DIR/consul_agent.pid
NODE_NAME='<%="#{name.gsub('_', '-')}-#{spec.index}"%>'

function main() {
  local confab_package
  confab_package=/var/vcap/packages/confab

  source /var/vcap/packages/consul-common/utils.sh

  mkdir -p /var/vcap/sys/log/monit
  exec 1>> /var/vcap/sys/log/monit/consul_agent.out.log
  exec 2>> /var/vcap/sys/log/monit/consul_agent.err.log

  case $1 in
    start)
      start "${confab_package}"
      ;;

    stop)
      stop "${confab_package}"
      ;;

    *)
      echo "Usage: $0 {start|stop}"
      ;;
  esac
}

function start() {
  local confab_package
  confab_package="${1}"

  pid_guard "${PIDFILE}" "consul_agent"

  mkdir -p "${LOG_DIR}"
  chown -R vcap:vcap "${LOG_DIR}"

  mkdir -p "${RUN_DIR}"
  chown -R vcap:vcap "${RUN_DIR}"

  mkdir -p "${DATA_DIR}"
  chown -R vcap:vcap "${DATA_DIR}"

  <% if p("consul.require_ssl") %>
    chown vcap:vcap ${CERT_DIR}/*.{crt,key}
    chmod 640 ${CERT_DIR}/*.{crt,key}
  <% end %>

  <% p("consul.agent.services").each do |service_name, service| %>
    cat > ${CONF_DIR}/service-<%= service_name %>.json <<EOF
    <%=
      {
        "service" => {
          "name" => service_name.tr('_', '-'),
          "check" => {
            "script" => "/var/vcap/jobs/#{service_name}/bin/dns_health_check",
            "interval" => "3s"
          },
          "tags" => ["#{name.gsub('_', '-')}-#{spec.index}"]
        }.merge(service)
      }.to_json
    %>
EOF
  <% end %>

  # "Consul uses a significant amount of virtual memory, since LMDB uses
  # mmap() underneath. It uses about 700MB of a 32bit system and 40GB on a
  # 64bit system."
  #
  # this mainly applies to bosh-lite
  ulimit -v unlimited
  ulimit -n 4096

  # add consul agent's dns to resolv.conf
  if resolvconf --updates-are-enabled; then
    # /etc/resolv.conf will probably be regenerated all the time, so add the
    # local dns server to /head, which will be prepended when regenerated.
    if ! grep -q 127.0.0.1 /etc/resolvconf/resolv.conf.d/head; then
      sed -i '/127.0.0.1/d' /etc/resolvconf/resolv.conf.d/head
    fi
    sed -i -e '1i nameserver 127.0.0.1' /etc/resolvconf/resolv.conf.d/head

    resolvconf -u
  else
    # updates are disabled in bosh-lite; in this case just add to
    # /etc/resolv.conf directly.
    #
    # enabling updates and then updating it with resolvconf -u seems to add
    # dns entries from where the box was generated.
    if ! grep -q 127.0.0.1 /etc/resolv.conf; then
      sed -i -e '1i nameserver 127.0.0.1' /etc/resolv.conf
    fi
  fi

  local consul_join
  consul_join="<%=p("consul.agent.servers.lan").join(',')%>"

  local server
  server=<%=p("consul.agent.mode") == "server"%>

  setcap cap_net_bind_service=+ep $PKG/bin/consul

  GOMAXPROCS=$(nproc)
  if [ "$GOMAXPROCS" = "1" ]; then
    GOMAXPROCS=2
  fi

  export GOMAXPROCS

  if [ "${server}" != "true" ]; then
    rm -f $DATA_DIR/serf/local.keyring
  fi

  local nameservers
  nameservers=("$(cat /etc/resolv.conf | grep nameserver | awk '{print $2}' | grep -v 127.0.0.1)")

  local recursors
  recursors=""

  for nameserver in ${nameservers[@]}; do
    recursors="${recursors} -recursor=${nameserver}"
  done

  chpst -u vcap:vcap "${confab_package}/bin/confab" \
    start \
    -server=<%=p("consul.agent.mode") == "server"%> \
    -agent-path="${PKG}/bin/consul" \
    -consul-config-dir="${CONF_DIR}" \
    -pid-file="${PIDFILE}" \
    ${recursors} \
    <% p("consul.agent.servers.lan").each do |server| %> \
      -expected-member <%= server %> \
    <% end %> \
    <% if_p("consul.encrypt_keys") do |encrypt_keys| %> \
      <% encrypt_keys.each do |key| %> \
        -encryption-key <%= string_to_encrypt_key(key) %> \
      <% end %> \
    <% end %> \
    <% if !p("consul.require_ssl") %> -ssl-disabled <% end %> \
    2> >(tee -a ${LOG_DIR}/consul_agent.stderr.log | logger -p user.error -t vcap.consul-agent) \
    1> >(tee -a ${LOG_DIR}/consul_agent.stdout.log | logger -p user.info  -t vcap.consul-agent)
}

function stop() {
  local confab_package
  confab_package="${1}"

  "${confab_package}/bin/confab" \
    stop \
    -consul-config-dir "${CONF_DIR}" \
    -pid-file "${PIDFILE}" \
    -agent-path="${PKG}/bin/consul" \
    2> >(tee -a ${LOG_DIR}/consul_agent.stderr.log | logger -p user.error -t vcap.consul-agent) \
    1> >(tee -a ${LOG_DIR}/consul_agent.stdout.log | logger -p user.info  -t vcap.consul-agent)
}

main $@
