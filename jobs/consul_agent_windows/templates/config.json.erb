<%=
  require 'openssl'
  require 'base64'
  def string_to_encrypt_key(string)
    return string if is_key?(string)
    Base64.strict_encode64(OpenSSL::PKCS5.pbkdf2_hmac_sha1(string, "", 20000, 16))
  end
  def is_key?(string)
    Base64.strict_decode64(string).length == 16
  rescue
    false
  end
  def discover_external_ip
    networks = spec.networks.marshal_dump
    _, network = networks.find do |_name, network_spec|
      network_spec.default
    end
    if !network
      _, network = networks.first
    end
    if !network
      raise "Could not determine IP via network spec: #{networks}"
    end
    network.ip
  end
  my_ip = discover_external_ip
  lan_servers = p("consul.agent.servers.lan")
  config = {
    "datacenter" => p("consul.agent.datacenter"),
    "domain" => "cf.internal",
    "data_dir" => "/var/vcap/store/consul",
    "log_level" => p("consul.agent.log_level"),
    "node_name" => "#{name.gsub('_', '-')}-#{spec.index}",
    "server" => false,
    "ports" => {
      "dns" => 53,
    },
    # without this, a single bootstrapped server will be orphaned after
    # restarting
    "rejoin_after_leave" => true,
    "retry_join" => lan_servers,
    # explicitly listen and advertise this job's IP; otherwise consul will pick
    # an external IP, and possibly pick the wrong one (e.g. if containers are
    # running on the VM)
    "bind_addr" => my_ip,
    # without this, a single bootstrapped server will be orphaned after
    # restarting
    "disable_remote_exec" => true,
    "disable_update_check" => true,
    "protocol" => p("consul.agent.protocol_version")
  }
if p("consul.require_ssl")
  certs_dir = "/var/vcap/jobs/consul_agent_windows/config/certs"
  key_file = "#{certs_dir}/agent.key"
  cert_file = "#{certs_dir}/agent.crt"
  config.merge!({
    "verify_outgoing" => true,
    "verify_incoming" => true,
    "verify_server_hostname" => true,
    "ca_file" => "#{certs_dir}/ca.crt",
    "key_file" => key_file,
    "cert_file" => cert_file,
    "encrypt" => string_to_encrypt_key(p("consul.encrypt_keys").first),
  })
end
  config.to_json
%>
